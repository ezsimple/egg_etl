<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="newegg.snap.grading">
    <select id="etlQuery" parameterType="QueryMap" resultType="QueryMap" >
    <![CDATA[ 
SELECT
--   COUNT(*) OVER() COUNT,
--   BR.FARM_CODE,
--   BR.FLOCK_ID,
--   BR.HH_ID,
--   EGT.TRANSFER_DATE,
   JSON_OBJECT(
     'update' VALUE JSON_OBJECT(
        '_index' VALUE 'cj-chickenfarm-snap-idx-'|| EXTRACT(YEAR FROM BR.WORK_DATE)
       ,'_id' VALUE TO_CHAR(BR.WORK_DATE, 'YYYY-MM-DD') || 'snap' || BR.FARM_CODE || BR.FLOCK_ID || BR.HH_ID
       ,'retry_on_conflict' VALUE 10
     )
   ) INDEX_META
   ,JSON_OBJECT(
    'doc' VALUE JSON_OBJECT(
      'doc_key' VALUE (
        TO_CHAR(BR.WORK_DATE, 'YYYY-MM-DD') || 'snap' || BR.FARM_CODE || BR.FLOCK_ID || BR.HH_ID
      )
      ,'grading' VALUE JSON_OBJECT (
          'grading_date' VALUE TO_CHAR(GRI.GRADING_DATE, 'YYYY-MM-DD')
         ,'grading_egg' VALUE GRI.GRADING_QTY
         ,'pre_cut_hatching_egg' VALUE GRI.HATCHING_EGG_QTY
         ,'hatching_egg' VALUE GRI.SETTING_QTY
         ,'hatching_egg_cum' VALUE SUM(GRI.SETTING_QTY) OVER(PARTITION BY BR.FARM_CODE, BR.FLOCK_ID, BR.HH_ID ORDER BY BR.WORK_DATE)
         ,'transfer_egg' VALUE GRI.TRANSFER_QTY
         ,'discard_egg' VALUE GRI.DISCARD_QTY
         ,'none_setting_egg' VALUE GRI.NONE_SETTING_QTY
         ,'cutting_egg' VALUE GRI.GRI_CUT_HATCHING_EGG_QTY
         ,'by_product' VALUE JSON_OBJECT(
             'miss_shape' VALUE GRI.MISS_SHAPE_EGG_QTY
            ,'thin' VALUE GRI.THIN_EGG_QTY
            ,'crack' VALUE GRI.CRACK_EGG_QTY
            ,'damage' VALUE GRI.DAMAGE_EGG_QTY
            ,'dirty' VALUE GRI.DIRTY_EGG_QTY
            ,'jumbo' VALUE GRI.JUMBO_EGG_QTY
            ,'small' VALUE GRI.SMALL_EGG_QTY
            ,'total' VALUE GRI.TOTAL_EGG_QTY  
          ABSENT ON NULL
         )
         ,'he_cum_per_hh_act' VALUE (
            TO_CHAR(
            ROUND(SUM(GRI.SETTING_QTY) OVER(PARTITION BY BR.FARM_CODE, BR.FLOCK_ID, BR.HH_ID ORDER BY BR.WORK_DATE) / LAYING_POP.FEMALE, 2)
            , 'FM9999999990.00')
         ) FORMAT JSON
         ,'he_cum_per_hh_std' VALUE (
             SELECT 
               STD.HE_CUM
             FROM TC_STANDARD_MAST STM
               LEFT JOIN TC_STANDARD_DTL STD ON STM.STANDARD_ID = STD.STANDARD_ID
             WHERE 
               STM.ACTIVE_DATE IN (
                 SELECT MAX(STM_D.ACTIVE_DATE) FROM TC_STANDARD_MAST STM_D 
                   WHERE STM_D.ACTIVE_DATE <= BR.WORK_DATE
                     GROUP BY STM_D.FARM_CLASS, STM_D.STRAIN_CODE, STM_D.BREEDING_TYPE
               ) AND STM.COUNTRY_CODE = (SELECT FM.COUNTRY_CODE FROM TC_FARM_INFO FM WHERE FM.FARM_CODE = BR.FARM_CODE) 
                 AND STM.FARM_CLASS=FA.FARM_CLASS
                 AND STM.STRAIN_CODE=FL.STRAIN_CODE 
                 AND STM.BREEDING_TYPE = CASE WHEN FL.LAYING_SDATE > BR.WORK_DATE THEN 'G' ELSE 'L' END
                 AND STD.AGE = BR.AGE_WEEK
          )
         ,'grading_dtl' VALUE GRI.GRADING_DTL
      --   ABSENT ON NULL
      ) -- grading
      ABSENT ON NULL
    ), 
    'doc_as_upsert' VALUE 'true' FORMAT JSON )cj_chickienfarm_snap_idx
FROM (                                                       -- TP_BREED_LOG
    SELECT BR.*
    ,TRUNC(BR.AGE_DAY /7) + 1 AGE_WEEK
    ,BR.WORK_DATE + (6 - MOD(BR.AGE_DAY, 7) ) AGE_WEEK_LAST_DAY 
    FROM TP_BREED_LOG BR
  )BR LEFT JOIN TC_FARM_INFO FA ON FA.FARM_CODE = BR.FARM_CODE   -- TC_FARM_INFO
--
LEFT JOIN (
    SELECT CURR.WORK_DATE,CURR.FARM_CODE, CURR.FLOCK_ID, CURR.HH_ID
        , CURR.FEMALE, CURR.MALE, CURR.FEMALE + CURR.MALE AS TOTAL
    FROM (
        SELECT 
            BRI.WORK_DATE,BRI.FARM_CODE, BRI.FLOCK_ID, BRI.HH_ID
            ,HHI.CHICKIN_QTY_F + NVL(MOI.MOVE_IN_ACC_F, 0) - NVL(MOI.MOVE_OUT_ACC_F, 0) -
            SUM(BRI.DEATH_QTY_F + BRI.CULLING_QTY_F) OVER(PARTITION BY BRI.FARM_CODE, BRI.FLOCK_ID, BRI.HH_ID ORDER BY BRI.WORK_DATE) FEMALE 
            ,HHI.CHICKIN_QTY_M + NVL(MOI.MOVE_IN_ACC_M, 0) - NVL(MOI.MOVE_OUT_ACC_M, 0) -
            SUM(BRI.DEATH_QTY_M + BRI.CULLING_QTY_M) OVER(PARTITION BY BRI.FARM_CODE, BRI.FLOCK_ID, BRI.HH_ID ORDER BY BRI.WORK_DATE) MALE
        FROM TP_BREED_LOG BRI
        LEFT JOIN TP_HH_CHICKIN HHI ON HHI.FARM_CODE = BRI.FARM_CODE AND HHI.FLOCK_ID = BRI.FLOCK_ID AND HHI.HH_ID = BRI.HH_ID
        LEFT JOIN (  -- move_hist
          SELECT 
            MO.MOVE_DATE,MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID
            ,SUM(MO.MOVE_IN_DS_F)  OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_IN_ACC_F
            ,SUM(MO.MOVE_OUT_DS_F) OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_OUT_ACC_F
            ,SUM(MO.MOVE_IN_DS_M)  OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_IN_ACC_M
            ,SUM(MO.MOVE_OUT_DS_M) OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_OUT_ACC_M
            FROM (
              SELECT 
                MO.MOVE_DATE,MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID
               ,SUM(MO.MOVE_IN_F) MOVE_IN_DS_F, SUM(MO.MOVE_OUT_F) MOVE_OUT_DS_F, SUM(MO.MOVE_IN_M) MOVE_IN_DS_M, SUM(MO.MOVE_OUT_M) MOVE_OUT_DS_M
              FROM (
                  SELECT MOVE_DATE,FARM_CODE ,FLOCK_ID,HH_ID, SEQ_NO
                      ,CASE WHEN MOVE_QTY_F >= 0 THEN MOVE_QTY_F ELSE 0 END MOVE_IN_F 
                      ,CASE WHEN MOVE_QTY_F < 0 THEN MOVE_QTY_F * -1 ELSE 0 END MOVE_OUT_F 
                      ,CASE WHEN MOVE_QTY_M >= 0 THEN MOVE_QTY_M ELSE 0 END MOVE_IN_M 
                      ,CASE WHEN MOVE_QTY_M < 0 THEN MOVE_QTY_M * -1 ELSE 0 END MOVE_OUT_M 
                      FROM TP_HH_MOVE_HIST
                      ORDER BY MOVE_DATE, FARM_CODE, FLOCK_ID, HH_ID, SEQ_NO
              ) MO     
                GROUP BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
                ORDER BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
          ) MO ORDER BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
        )  MOI ON MOI.MOVE_DATE = BRI.WORK_DATE 
                AND MOI.FARM_CODE = BRI.FARM_CODE AND MOI.FLOCK_ID = BRI.FLOCK_ID AND MOI.HH_ID = BRI.HH_ID                
    ) CURR 
) CURR ON BR.WORK_DATE = CURR.WORK_DATE AND BR.FARM_CODE = CURR.FARM_CODE 
    AND BR.FLOCK_ID = CURR.FLOCK_ID AND BR.HH_ID = CURR.HH_ID
LEFT JOIN (
    SELECT LAYING_POP.WORK_DATE,LAYING_POP.FARM_CODE, LAYING_POP.FLOCK_ID, LAYING_POP.HH_ID
        , LAYING_POP.FEMALE, LAYING_POP.MALE, LAYING_POP.FEMALE + LAYING_POP.MALE AS TOTAL
    FROM (
        SELECT 
            BRI.WORK_DATE,BRI.FARM_CODE, BRI.FLOCK_ID, BRI.HH_ID
            ,HHI.CHICKIN_QTY_F + NVL(MOI.MOVE_IN_ACC_F, 0) - NVL(MOI.MOVE_OUT_ACC_F, 0) -
            SUM(BRI.DEATH_QTY_F + BRI.CULLING_QTY_F) OVER(PARTITION BY BRI.FARM_CODE, BRI.FLOCK_ID, BRI.HH_ID ORDER BY BRI.WORK_DATE) FEMALE 
            ,HHI.CHICKIN_QTY_M + NVL(MOI.MOVE_IN_ACC_M, 0) - NVL(MOI.MOVE_OUT_ACC_M, 0) -
            SUM(BRI.DEATH_QTY_M + BRI.CULLING_QTY_M) OVER(PARTITION BY BRI.FARM_CODE, BRI.FLOCK_ID, BRI.HH_ID ORDER BY BRI.WORK_DATE) MALE
        FROM TP_BREED_LOG BRI
        LEFT JOIN TP_HH_CHICKIN HHI ON HHI.FARM_CODE = BRI.FARM_CODE AND HHI.FLOCK_ID = BRI.FLOCK_ID AND HHI.HH_ID = BRI.HH_ID
        LEFT JOIN (  -- move_hist
          SELECT 
            MO.MOVE_DATE,MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID
            ,SUM(MO.MOVE_IN_DS_F)  OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_IN_ACC_F
            ,SUM(MO.MOVE_OUT_DS_F) OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_OUT_ACC_F
            ,SUM(MO.MOVE_IN_DS_M)  OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_IN_ACC_M
            ,SUM(MO.MOVE_OUT_DS_M) OVER(PARTITION BY MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_OUT_ACC_M
            FROM (
              SELECT 
                MO.MOVE_DATE,MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID
               ,SUM(MO.MOVE_IN_F) MOVE_IN_DS_F, SUM(MO.MOVE_OUT_F) MOVE_OUT_DS_F, SUM(MO.MOVE_IN_M) MOVE_IN_DS_M, SUM(MO.MOVE_OUT_M) MOVE_OUT_DS_M
              FROM (
                  SELECT MOVE_DATE,FARM_CODE ,FLOCK_ID,HH_ID, SEQ_NO
                      ,CASE WHEN MOVE_QTY_F >= 0 THEN MOVE_QTY_F ELSE 0 END MOVE_IN_F 
                      ,CASE WHEN MOVE_QTY_F < 0 THEN MOVE_QTY_F * -1 ELSE 0 END MOVE_OUT_F 
                      ,CASE WHEN MOVE_QTY_M >= 0 THEN MOVE_QTY_M ELSE 0 END MOVE_IN_M 
                      ,CASE WHEN MOVE_QTY_M < 0 THEN MOVE_QTY_M * -1 ELSE 0 END MOVE_OUT_M 
                      FROM TP_HH_MOVE_HIST
                      ORDER BY MOVE_DATE, FARM_CODE, FLOCK_ID, HH_ID, SEQ_NO
              ) MO     
                GROUP BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
                ORDER BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
          ) MO ORDER BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
        )  MOI ON MOI.MOVE_DATE = BRI.WORK_DATE 
                AND MOI.FARM_CODE = BRI.FARM_CODE AND MOI.FLOCK_ID = BRI.FLOCK_ID AND MOI.HH_ID = BRI.HH_ID                
    ) LAYING_POP 
    WHERE LAYING_POP.WORK_DATE = (SELECT LAYING_SDATE FROM TP_FLOCK_INFO FLI WHERE FLI.FARM_CODE = LAYING_POP.FARM_CODE AND FLI.FLOCK_ID =LAYING_POP.FLOCK_ID )
) LAYING_POP 
    ON BR.FARM_CODE = LAYING_POP.FARM_CODE 
    AND BR.FLOCK_ID = LAYING_POP.FLOCK_ID AND BR.HH_ID = LAYING_POP.HH_ID
LEFT JOIN TP_FLOCK_INFO FL
    ON FL.FARM_CODE = BR.FARM_CODE AND FL.FLOCK_ID = BR.FLOCK_ID  -- TP_FLOCK_INFO
-- flockin
  LEFT JOIN (          -- BREED_RECEIVE FLOCK_IN
    SELECT 
       BRR.FARM_CODE
      ,BRR.FLOCK_ID
      ,SUM(BRR.FLOCK_IN_QTY_F) FLOCK_IN_T_F
      ,SUM(BRR.FLOCK_IN_QTY_M) FLOCK_IN_T_M
      FROM TP_BREED_RECV BRR
        GROUP BY BRR.FARM_CODE, BRR.FLOCK_ID
        ORDER BY BRR.FARM_CODE, BRR.FLOCK_ID
    ) BRRS ON BRRS.FARM_CODE = BR.FARM_CODE
          AND BRRS.FLOCK_ID = BR.FLOCK_ID
  LEFT JOIN TP_HH_CHICKIN HH
      ON HH.FARM_CODE = BR.FARM_CODE
        AND HH.FLOCK_ID = BR.FLOCK_ID
        AND HH.HH_ID = BR.HH_ID
  LEFT JOIN TC_BREED_HH_INFO BHH
      ON HH.FARM_CODE = BHH.FARM_CODE
        AND HH.HH_ID = BHH.HH_ID
-- end flockin
-- move-hist
  LEFT JOIN (  -- move_hist
    SELECT 
      MO.MOVE_DATE,MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID, MO.MOVE_IN_DS_F, MO.MOVE_OUT_DS_F, MO.MOVE_IN_DS_M, MO.MOVE_OUT_DS_M, MO.REASON_HIST
      ,SUM(MO.MOVE_IN_DS_F)  OVER(PARTITION BY FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_IN_ACC_F
      ,SUM(MO.MOVE_OUT_DS_F) OVER(PARTITION BY FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_OUT_ACC_F
      ,SUM(MO.MOVE_IN_DS_M)  OVER(PARTITION BY FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_IN_ACC_M
      ,SUM(MO.MOVE_OUT_DS_M) OVER(PARTITION BY FARM_CODE ,MO.FLOCK_ID, MO.HH_ID ORDER BY MO.MOVE_DATE) MOVE_OUT_ACC_M
      FROM (
        SELECT 
          MO.MOVE_DATE,MO.FARM_CODE ,MO.FLOCK_ID, MO.HH_ID
         ,SUM(MO.MOVE_IN_F) MOVE_IN_DS_F, SUM(MO.MOVE_OUT_F) MOVE_OUT_DS_F, SUM(MO.MOVE_IN_M) MOVE_IN_DS_M, SUM(MO.MOVE_OUT_M) MOVE_OUT_DS_M
         ,JSON_OBJECT(
            'move_date' VALUE TO_CHAR(MO.MOVE_DATE, 'YYYY-MM-DD')
           ,'reason' VALUE (
             JSON_ARRAYAGG(
               JSON_OBJECT(
                  'seq_no' VALUE MO.SEQ_NO
                 ,'reason' VALUE MO.MOVE_REASON
                 ABSENT ON NULL
               ) ORDER BY MO.SEQ_NO
             ) 
           )
           ABSENT ON NULL
         ) REASON_HIST
        FROM (
        SELECT MOVE_DATE,FARM_CODE ,FLOCK_ID,HH_ID, SEQ_NO
            ,CASE WHEN MOVE_QTY_F >= 0 THEN MOVE_QTY_F ELSE 0 END MOVE_IN_F 
            ,CASE WHEN MOVE_QTY_F < 0 THEN MOVE_QTY_F * -1 ELSE 0 END MOVE_OUT_F 
            ,CASE WHEN MOVE_QTY_M >= 0 THEN MOVE_QTY_M ELSE 0 END MOVE_IN_M 
            ,CASE WHEN MOVE_QTY_M < 0 THEN MOVE_QTY_M * -1 ELSE 0 END MOVE_OUT_M 
            ,MOVE_REASON
            FROM TP_HH_MOVE_HIST
            ORDER BY MOVE_DATE, FARM_CODE, FLOCK_ID, HH_ID, SEQ_NO
        ) MO     
          GROUP BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, MO.HH_ID
          ORDER BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, HH_ID
--
    ) MO ORDER BY MO.MOVE_DATE, MO.FARM_CODE, MO.FLOCK_ID, HH_ID
--
  )  MO  -- end move_hist
    ON MO.MOVE_DATE = BR.WORK_DATE AND MO.FARM_CODE = BR.FARM_CODE AND MO.FLOCK_ID = BR.FLOCK_ID AND MO.HH_ID = BR.HH_ID
--
--end move-hist
LEFT JOIN (                                           -- FEED_INFO
  SELECT 
       FE.WORK_DATE FEED_DATE
      ,FE.FARM_CODE
      ,FE.FLOCK_ID
      ,FE.HH_ID
      ,SUM(FE.USE_AMT_F)  TOTAL_USE_AMT_F    -- JDY KG UNIT
      ,SUM(FE.USE_AMT_M)  TOTAL_USE_AMT_M    -- JDY KG UNIT
--
      ,JSON_OBJECT(
         'feed_date' VALUE TO_CHAR(FE.WORK_DATE, 'YYYY-MM-DD')
        ,'feed_hist' VALUE (
             JSON_ARRAYAGG(
               JSON_OBJECT(
                 'female' VALUE JSON_OBJECT(
                     'seq_no' VALUE FE.SEQ_NO
                    ,'code' VALUE FE.FEED_CODE
                    ,'name' VALUE MA.MATERIAL_NAME
                    ,'using' VALUE MA.USING_CLASS
                    ,'using_name' VALUE CD.CODE_STEXT
                    ,'use_amount' VALUE FE.USE_AMT_F     -- KG UNIT
                )
                ,'male' VALUE JSON_OBJECT(
                    'seq_no' VALUE FE.SEQ_NO
                    ,'code' VALUE FE.FEED_CODE
                    ,'name' VALUE MA.MATERIAL_NAME
                    ,'using' VALUE MA.USING_CLASS
                    ,'using_name' VALUE CD.CODE_STEXT
                    ,'use_amount' VALUE FE.USE_AMT_M      -- KG UNIT
                )
               ) ORDER BY FE.SEQ_NO
            ) 
        )
        ABSENT ON NULL
      ) FEED_HIST
      FROM TP_BREED_LOG_FEED FE
          LEFT JOIN TC_MATERIAL_INFO MA
            ON FE.FEED_CODE = MA.MATERIAL_CODE
          LEFT JOIN TC_FARM_INFO FA
            ON FE.FARM_CODE = FA.FARM_CODE
          LEFT JOIN TC_CODE_DTL CD
            ON CD.COUNTRY_CODE = FA.COUNTRY_CODE
                AND CD.CODE_ID = 'EP22'
                AND CD.CODE_VALUE = MA.USING_CLASS 
          GROUP BY FE.WORK_DATE, FE.FARM_CODE, FE.FLOCK_ID, FE.HH_ID
--
    ) FEH ON FEH.FEED_DATE = BR.WORK_DATE
              AND FEH.FARM_CODE = BR.FARM_CODE 
              AND FEH.FLOCK_ID = BR.FLOCK_ID
              AND FEH.HH_ID = BR.HH_ID
--
LEFT JOIN (    -- TP_BREED_LOG_MED
  SELECT 
     MED.WORK_DATE MED_DATE			                                -- 작업 일자 / Work Date
    ,MED.FARM_CODE				                                -- 농장코드 / Farm Code국가(1) + 축종(1) + Type(1) + 지역(3) + Serial(3) 축종 : Code ID EP23 Type : Code ID EP24
    ,MED.FLOCK_ID				                                -- 계군 ID/ Flock ID계군 입식시 자체 생성품종(2) + 년도(2) + 농장약어코드(4) + Serial(5)Flock ID 생성 Function : FN_NEW_FLOCK_ID(품종(2), 년도(2), 농장약어코드(4))
    ,MED.HH_ID				                                    -- 계사ID / Hen House ID / hhcode
    ,JSON_ARRAYAGG(
      JSON_OBJECT(
         'seq_no' VALUE MED.SEQ_NO
        ,'code' VALUE MED.MEDICINE_CODE
        ,'name' VALUE MA.MATERIAL_NAME
        ,'using' VALUE MA.USING_CLASS
        ,'using_name' VALUE CD.CODE_STEXT
        ,'amount' VALUE MED.USE_AMT
        ,'unit' VALUE MA.UNIT
        NULL ON NULL
      )
  )  MEDI_HIST -- JSON_ARRAY
    FROM TP_BREED_LOG_MED MED
        LEFT JOIN TC_MATERIAL_INFO MA
          ON MED.MEDICINE_CODE = MA.MATERIAL_CODE
        LEFT JOIN TC_CODE_DTL CD
          ON CD.COUNTRY_CODE = (SELECT FM.COUNTRY_CODE FROM TC_FARM_INFO FM WHERE FM.FARM_CODE = MED.FARM_CODE) --'01'
              AND CD.CODE_ID = 'EP22'
              AND CD.CODE_VALUE = MA.USING_CLASS
        GROUP BY MED.WORK_DATE, MED.FARM_CODE, MED.FLOCK_ID, MED.HH_ID
) MED ON MED.MED_DATE = BR.WORK_DATE
           AND MED.FARM_CODE = BR.FARM_CODE 
           AND MED.FLOCK_ID = BR.FLOCK_ID
           AND MED.HH_ID = BR.HH_ID
LEFT JOIN (    -- VAC_HIST
  SELECT 
     VAC.WORK_DATE	VAC_DATE			                                -- 작업 일자 / Work Date
    ,VAC.FARM_CODE				                                -- 농장코드 / Farm Code국가(1) + 축종(1) + Type(1) + 지역(3) + Serial(3) 축종 : Code ID EP23 Type : Code ID EP24
    ,VAC.FLOCK_ID				                                -- 계군 ID/ Flock ID계군 입식시 자체 생성품종(2) + 년도(2) + 농장약어코드(4) + Serial(5)Flock ID 생성 Function : FN_NEW_FLOCK_ID(품종(2), 년도(2), 농장약어코드(4))
    ,VAC.HH_ID				                                    -- 계사ID / Hen House ID / hhcode
    ,JSON_ARRAYAGG(
      JSON_OBJECT(
         'seq_no' VALUE CASE VAC.SEQ_NO WHEN NULL THEN '' ELSE TO_CHAR(VAC.SEQ_NO) END
        ,'code' VALUE VAC.VACCINE_CODE
        ,'name' VALUE MA.MATERIAL_NAME
        ,'using' VALUE MA.USING_CLASS
        ,'using_name' VALUE CD.CODE_STEXT
        ,'amount' VALUE VAC.USE_AMT
        ,'unit' VALUE MA.UNIT
      )
  )  VAC_HIST -- JSON_ARRAY
    FROM TP_BREED_LOG_VAC VAC
        LEFT JOIN TC_MATERIAL_INFO MA
          ON VAC.VACCINE_CODE = MA.MATERIAL_CODE
        LEFT JOIN TC_CODE_DTL CD
          ON CD.COUNTRY_CODE = (SELECT FM.COUNTRY_CODE FROM TC_FARM_INFO FM WHERE FM.FARM_CODE = VAC.FARM_CODE) --'01'
              AND CD.CODE_ID = 'EP22'
              AND CD.CODE_VALUE = MA.USING_CLASS
        GROUP BY VAC.WORK_DATE, VAC.FARM_CODE, VAC.FLOCK_ID, VAC.HH_ID
) VAC ON VAC.VAC_DATE = BR.WORK_DATE
           AND VAC.FARM_CODE = BR.FARM_CODE 
           AND VAC.FLOCK_ID = BR.FLOCK_ID
           AND VAC.HH_ID = BR.HH_ID
LEFT JOIN TP_EGGPROD_LOG EGP   -- 종란 생산
    ON BR.WORK_DATE = EGP.EP_DATE AND BR.FARM_CODE = EGP.FARM_CODE 
    AND BR.FLOCK_ID = EGP.FLOCK_ID AND BR.HH_ID = EGP.HH_ID
LEFT JOIN ( -- 부화장 전달 (종계장 출고) 
    SELECT EGT.TRANSFER_DATE, EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'T' THEN EGT.GOOD_EGG_QTY
      ELSE 0 END
    ) T_GOOD_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'S' THEN EGT.GOOD_EGG_QTY
      ELSE 0 END
    ) S_GOOD_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'D' THEN EGT.GOOD_EGG_QTY
      ELSE 0 END
    ) D_GOOD_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'X' THEN EGT.GOOD_EGG_QTY
      ELSE 0 END
    ) X_GOOD_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'T' THEN 
        EGT.CRACK_EGG_QTY + EGT.DAMAGE_EGG_QTY + EGT.DIRTY_EGG_QTY + EGT.JUMBO_EGG_QTY + EGT.SMALL_EGG_QTY + EGT.MISS_SHAPE_EGG_QTY
      ELSE 0 END
    ) T_CULL_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'S' THEN 
        EGT.CRACK_EGG_QTY + EGT.DAMAGE_EGG_QTY + EGT.DIRTY_EGG_QTY + EGT.JUMBO_EGG_QTY + EGT.SMALL_EGG_QTY + EGT.MISS_SHAPE_EGG_QTY
      ELSE 0 END
    ) S_CULL_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'D' THEN 
        EGT.CRACK_EGG_QTY + EGT.DAMAGE_EGG_QTY + EGT.DIRTY_EGG_QTY + EGT.JUMBO_EGG_QTY + EGT.SMALL_EGG_QTY + EGT.MISS_SHAPE_EGG_QTY
      ELSE 0 END
    ) D_CULL_EGG_QTY
    ,SUM(
      CASE EGT.TRANSFER_TYPE WHEN 'X' THEN 
        EGT.CRACK_EGG_QTY + EGT.DAMAGE_EGG_QTY + EGT.DIRTY_EGG_QTY + EGT.JUMBO_EGG_QTY + EGT.SMALL_EGG_QTY + EGT.MISS_SHAPE_EGG_QTY
      ELSE 0 END
    ) X_CULL_EGG_QTY
-- 개별 egg 출고 현황
    ,SUM(EGT.GOOD_EGG_QTY) D_EGT_GOOD_EGG_QTY
    ,SUM(EGT.CRACK_EGG_QTY) D_EGT_CRACK_EGG_QTY
    ,SUM(EGT.DAMAGE_EGG_QTY) D_EGT_DAMAGE_EGG_QTY
    ,SUM(EGT.DIRTY_EGG_QTY) D_EGT_DIRTY_EGG_QTY
    ,SUM(EGT.JUMBO_EGG_QTY) D_EGT_JUMBO_EGG_QTY
    ,SUM(EGT.SMALL_EGG_QTY) D_EGT_SMALL_EGG_QTY
    ,SUM(EGT.MISS_SHAPE_EGG_QTY) D_EGT_MISS_SHAPE_EGG_QTY
    ,JSON_ARRAYAGG(
      JSON_OBJECT(
        'transfer_date' VALUE TO_CHAR(EGT.TRANSFER_DATE, 'YYYY-MM-DD')
       ,'transfer_no' VALUE EGT.TRANSFER_NO
       ,'hatchery_id' VALUE EGT.HATCHERY_ID
       ,'transfer_type' VALUE EGT.TRANSFER_TYPE 
       ,'p_order_no' VALUE EGT.P_ORDER_NO
       ,'customer_code' VALUE EGT.CUSTOMER_CODE
       ,'transfer_qty' VALUE  EGT.TRANSFER_QTY
       ,'weight' VALUE  EGT.WEIGHT
       ,'truck_no' VALUE EGT.TRUCK_NO
       ,'remakrs' VALUE EGT.REMARKS
       ,'hh_transfer_qty' VALUE EGT.HH_TRANSFER_QTY
       ,'egg' VALUE JSON_OBJECT (
           'ep_date' VALUE TO_CHAR(EGT.EP_DATE, 'YYYY-MM-DD')
           ,'strain_code' VALUE EGT.STRAIN_CODE
           ,'good' VALUE EGT.GOOD_EGG_QTY
           ,'crack' VALUE EGT.CRACK_EGG_QTY
           ,'damage' VALUE EGT.DAMAGE_EGG_QTY
           ,'dirty' VALUE EGT.DIRTY_EGG_QTY
           ,'jumbo' VALUE EGT.JUMBO_EGG_QTY
           ,'small' VALUE EGT.SMALL_EGG_QTY
           ,'miss_shape' VALUE EGT.MISS_SHAPE_EGG_QTY
           ,'total' VALUE (EGT.GOOD_EGG_QTY+EGT.CRACK_EGG_QTY+EGT.DAMAGE_EGG_QTY+EGT.DIRTY_EGG_QTY+EGT.JUMBO_EGG_QTY+EGT.SMALL_EGG_QTY+EGT.MISS_SHAPE_EGG_QTY)
            ABSENT ON NULL
       )
          ABSENT ON NULL
      ) ORDER BY EGT.TRANSFER_DATE, EGT.TRANSFER_NO, EGT.HATCHERY_ID , EGT.EP_DATE
    ) D_EGG_DTL
      --  ,COUNT(*) OVER()
    FROM TP_EGGPROD_LOG EGP
    LEFT JOIN (
        SELECT EGT.EP_DATE, EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGTM.TRANSFER_DATE, EGTM.TRANSFER_TYPE
            ,EGT.STRAIN_CODE, EGT.GOOD_EGG_QTY, EGT.CRACK_EGG_QTY, EGT.DAMAGE_EGG_QTY
            ,EGT.DIRTY_EGG_QTY,EGT.JUMBO_EGG_QTY,EGT.SMALL_EGG_QTY,EGT.MISS_SHAPE_EGG_QTY
            ,EGTM.HATCHERY_ID
            ,EGT.TRANSFER_NO
            ,(EGTH.GOOD_EGG_QTY + EGTH.CRACK_EGG_QTY + EGTH.DAMAGE_EGG_QTY + EGTH.DIRTY_EGG_QTY + EGTH.JUMBO_EGG_QTY + EGTH.SMALL_EGG_QTY + EGTH.MISS_SHAPE_EGG_QTY) HH_TRANSFER_QTY
            ,EGTM.P_ORDER_NO, EGTM.CUSTOMER_CODE, EGTM.TRANSFER_QTY, EGTM.WEIGHT, EGTM.TRUCK_NO, EGTM.REMARKS
     --       ,COUNT(*) OVER() COUNT
        FROM TP_EGG_TRANSFER_EPDATE EGT
        INNER JOIN TP_EGG_TRANSFER_MAST EGTM 
        ON EGT.FARM_CODE = EGTM.FARM_CODE AND EGT.TRANSFER_NO = EGTM.TRANSFER_NO
        LEFT JOIN TP_EGG_TRANSFER_HH EGTH
        ON EGT.FARM_CODE = EGTH.FARM_CODE AND EGT.FLOCK_ID = EGTH.FLOCK_ID
            AND EGT.HH_ID = EGTH.HH_ID AND EGT.TRANSFER_NO = EGTH.TRANSFER_NO
    ) EGT ON EGP.EP_DATE = EGT.EP_DATE AND EGP.FARM_CODE = EGT.FARM_CODE
      AND EGP.FLOCK_ID = EGT.FLOCK_ID AND EGP.HH_ID = EGT.HH_ID
    GROUP BY EGT.TRANSFER_DATE, EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID
    ORDER BY EGT.TRANSFER_DATE, EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID
) EGT ON BR.WORK_DATE = EGT.TRANSFER_DATE AND BR.FARM_CODE = EGT.FARM_CODE
      AND BR.FLOCK_ID = EGT.FLOCK_ID AND BR.HH_ID = EGT.HH_ID
LEFT JOIN (  -- 부화장 입고
    SELECT HER.FARM_CODE, HER.FLOCK_ID, HER.HH_ID,  HER.RECEIVE_DATE
        ,NVL(SUM(R_GOOD_EGG_QTY),0) - NVL(SUM(MOVE_OUT_GOOD_EGG_QTY),0) + NVL(SUM(MOVE_IN_GOOD_EGG_QTY),0) RS_GOOD_EGG_QTY
        ,NVL(SUM(R_DIRTY_EGG_QTY),0) - NVL(SUM(MOVE_OUT_DIRTY_EGG_QTY),0) + NVL(SUM(MOVE_IN_DIRTY_EGG_QTY),0) RS_DIRTY_EGG_QTY
        ,NVL(SUM(R_JUMBO_EGG_QTY),0) - NVL(SUM(MOVE_OUT_JUMBO_EGG_QTY),0) + NVL(SUM(MOVE_IN_JUMBO_EGG_QTY),0) RS_JUMBO_EGG_QTY
        ,NVL(SUM(R_SMALL_EGG_QTY),0) - NVL(SUM(MOVE_OUT_SMALL_EGG_QTY),0) + NVL(SUM(MOVE_IN_SMALL_EGG_QTY),0) RS_SMALL_EGG_QTY
        ,NVL(SUM(R_MISS_SHAPE_EGG_QTY),0) - NVL(SUM(MOVE_OUT_MISS_SHAPE_EGG_QTY),0) + NVL(SUM(MOVE_IN_MISS_SHAPE_EGG_QTY),0) RS_MISS_SHAPE_EGG_QTY
        ,NVL(SUM(R_GOOD_EGG_QTY),0) - NVL(SUM(MOVE_OUT_GOOD_EGG_QTY),0) + NVL(SUM(MOVE_IN_GOOD_EGG_QTY),0)
         + NVL(SUM(R_DIRTY_EGG_QTY),0) - NVL(SUM(MOVE_OUT_DIRTY_EGG_QTY),0) + NVL(SUM(MOVE_IN_DIRTY_EGG_QTY),0)
         + NVL(SUM(R_JUMBO_EGG_QTY),0) - NVL(SUM(MOVE_OUT_JUMBO_EGG_QTY),0) + NVL(SUM(MOVE_IN_JUMBO_EGG_QTY),0)
         + NVL(SUM(R_SMALL_EGG_QTY),0) - NVL(SUM(MOVE_OUT_SMALL_EGG_QTY),0) + NVL(SUM(MOVE_IN_SMALL_EGG_QTY),0)
         + NVL(SUM(R_MISS_SHAPE_EGG_QTY),0) - NVL(SUM(MOVE_OUT_MISS_SHAPE_EGG_QTY),0) + NVL(SUM(MOVE_IN_MISS_SHAPE_EGG_QTY),0) RS_TOTAL_EGG_QTY
        ,NVL(SUM(MOVE_OUT_GOOD_EGG_QTY),0) S_MOVE_OUT_GOOD_EGG_QTY
        ,NVL(SUM(MOVE_OUT_DIRTY_EGG_QTY),0) S_MOVE_OUT_DIRTY_EGG_QTY
        ,NVL(SUM(MOVE_OUT_JUMBO_EGG_QTY),0) S_MOVE_OUT_JUMBO_EGG_QTY
        ,NVL(SUM(MOVE_OUT_SMALL_EGG_QTY),0) S_MOVE_OUT_SMALL_EGG_QTY
        ,NVL(SUM(MOVE_OUT_MISS_SHAPE_EGG_QTY),0) S_MOVE_OUT_MISS_SHAPE_EGG_QTY
        ,NVL(SUM(MOVE_OUT_GOOD_EGG_QTY),0) + NVL(SUM(MOVE_OUT_DIRTY_EGG_QTY),0) + NVL(SUM(MOVE_OUT_JUMBO_EGG_QTY),0) 
          + NVL(SUM(MOVE_OUT_SMALL_EGG_QTY),0) + NVL(SUM(MOVE_OUT_MISS_SHAPE_EGG_QTY),0) S_MOVE_OUT_TOTAL_EGG_QTY
        ,NVL(SUM(MOVE_IN_GOOD_EGG_QTY),0) S_MOVE_IN_GOOD_EGG_QTY
        ,NVL(SUM(MOVE_IN_DIRTY_EGG_QTY),0) S_MOVE_IN_DIRTY_EGG_QTY
        ,NVL(SUM(MOVE_IN_JUMBO_EGG_QTY),0) S_MOVE_IN_JUMBO_EGG_QTY
        ,NVL(SUM(MOVE_IN_SMALL_EGG_QTY),0) S_MOVE_IN_SMALL_EGG_QTY
        ,NVL(SUM(MOVE_IN_MISS_SHAPE_EGG_QTY),0) S_MOVE_IN_MISS_SHAPE_EGG_QTY
        ,NVL(SUM(MOVE_IN_GOOD_EGG_QTY),0) + NVL(SUM(MOVE_IN_DIRTY_EGG_QTY),0) + NVL(SUM(MOVE_IN_JUMBO_EGG_QTY),0)
          + NVL(SUM(MOVE_IN_SMALL_EGG_QTY),0) + NVL(SUM(MOVE_IN_MISS_SHAPE_EGG_QTY),0) S_MOVE_IN_TOTAL_EGG_QTY
        ,JSON_ARRAYAGG(
          JSON_OBJECT (
             'hatchery_id' VALUE HER.HATCHERY_ID
            ,'egg_receive_no' VALUE HER.EGG_RECEIVE_NO
            ,'p_order_no' VALUE HER.P_ORDER_NO
            ,'customer_code' VALUE HER.CUSTOMER_CODE
            ,'transfer_no' VALUE HER.TRANSFER_NO
            ,'move_in_flag' VALUE HER.MOVE_IN_FLAG
            ,'from_receive_no' VALUE HER.FROM_RECEIVE_NO
            ,'from_hatchery_id' VALUE HER.FROM_HATCHERY_ID
            ,'grading_date' VALUE HER.GRADING_DATE
            ,'move_out_date' VALUE HER.MOVE_OUT_DATE
            ,'truck_no' VALUE HER.TRUCK_NO
            ,'remarks' VALUE HER.REMARKS
            ,'egg' VALUE JSON_OBJECT (
                'strain_code' VALUE HER.STRAIN_CODE
                ,'good' VALUE HER.GOOD_EGG_QTY
                ,'dirty' VALUE HER.DIRTY_EGG_QTY
                ,'jumbo' VALUE HER.JUMBO_EGG_QTY
                ,'small' VALUE HER.SMALL_EGG_QTY
                ,'miss_shape' VALUE HER.MISS_SHAPE_EGG_QTY
                ,'total' VALUE (HER.GOOD_EGG_QTY+HER.DIRTY_EGG_QTY+HER.JUMBO_EGG_QTY+HER.SMALL_EGG_QTY+HER.MISS_SHAPE_EGG_QTY)
              ABSENT ON NULL
            )
--TEMP_D            ,'from_hh_egg' VALUE EGT.FROM_HH_EGG
--TEMP_D            ,'from_hh_dtl' VALUE EGT.FROM_HH_DTL
            ABSENT ON NULL
          ) ORDER BY HER.TRANSFER_NO
          ABSENT ON NULL
        ) HATCHERY_RECV_DTL
     --   , COUNT(*) OVER() COUNT
     --   ,HER.TRANSFER_NO
    FROM (
        SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
            ,JSON_OBJECT(
               'good' VALUE SUM(EGT.GOOD_EGG_QTY)
              ,'crack' VALUE SUM(EGT.CRACK_EGG_QTY)
              ,'damage' VALUE SUM(EGT.DAMAGE_EGG_QTY)
              ,'dirty' VALUE SUM(EGT.DIRTY_EGG_QTY)
              ,'jumbo' VALUE SUM(EGT.JUMBO_EGG_QTY)
              ,'small' VALUE SUM(EGT.SMALL_EGG_QTY)
              ,'miss_shape' VALUE SUM(EGT.MISS_SHAPE_EGG_QTY)
              ,'total' VALUE SUM(EGT.GOOD_EGG_QTY+EGT.CRACK_EGG_QTY+EGT.DAMAGE_EGG_QTY+EGT.DIRTY_EGG_QTY+EGT.JUMBO_EGG_QTY+EGT.SMALL_EGG_QTY+EGT.MISS_SHAPE_EGG_QTY) 
            ) FROM_HH_EGG
            ,JSON_ARRAYAGG (
                JSON_OBJECT(
                  'transfer_date' VALUE TO_CHAR(EGTM.TRANSFER_DATE, 'YYYY-MM-DD')
                  ,'transfer_no' VALUE EGT.TRANSFER_NO
                  ,'transfer_type' VALUE EGTM.TRANSFER_TYPE
                  ,'ep_date' VALUE TO_CHAR(EGT.EP_DATE, 'YYYY-MM-DD')
                  ,'egg' VALUE JSON_OBJECT (
                      'good' VALUE EGT.GOOD_EGG_QTY
                     ,'crack' VALUE EGT.CRACK_EGG_QTY
                     ,'damage' VALUE EGT.DAMAGE_EGG_QTY
                     ,'dirty' VALUE EGT.DIRTY_EGG_QTY
                     ,'jumbo' VALUE EGT.JUMBO_EGG_QTY
                     ,'small' VALUE EGT.SMALL_EGG_QTY
                     ,'miss_shape' VALUE EGT.MISS_SHAPE_EGG_QTY
                     ,'total' VALUE (EGT.GOOD_EGG_QTY+EGT.CRACK_EGG_QTY+EGT.DAMAGE_EGG_QTY+EGT.DIRTY_EGG_QTY+EGT.JUMBO_EGG_QTY+EGT.SMALL_EGG_QTY+EGT.MISS_SHAPE_EGG_QTY)
                     ABSENT ON NULL
                  )     
                  ABSENT ON NULL
                ) ORDER BY EGT.TRANSFER_NO, EGTM.TRANSFER_DATE, EGT.EP_DATE
              ABSENT ON NULL
            ) FROM_HH_DTL
      --  ,COUNT(*) OVER() COUNT
        FROM TP_EGGPROD_LOG EGP
        LEFT JOIN TP_EGG_TRANSFER_EPDATE EGT
        ON EGP.EP_DATE = EGT.EP_DATE AND EGP.FARM_CODE = EGT.FARM_CODE 
            AND EGP.FLOCK_ID = EGT.FLOCK_ID AND EGP.HH_ID = EGT.HH_ID
        INNER JOIN TP_EGG_TRANSFER_MAST EGTM 
        ON EGT.FARM_CODE = EGTM.FARM_CODE AND EGT.TRANSFER_NO = EGTM.TRANSFER_NO
        LEFT JOIN TP_EGG_TRANSFER_HH EGTH
        ON EGT.FARM_CODE = EGTH.FARM_CODE AND EGT.FLOCK_ID = EGTH.FLOCK_ID
            AND EGT.HH_ID = EGTH.HH_ID AND EGT.TRANSFER_NO = EGTH.TRANSFER_NO
        WHERE EGTM.TRANSFER_TYPE = 'T'    -- 이것은 단지 부화장으로 출고된 egg 만 필요하다.
        GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
    ) EGT
    LEFT JOIN (
        SELECT HER.*
            ,CASE HER.MOVE_IN_FLAG WHEN 'N' THEN  HER.GOOD_EGG_QTY  ELSE 0 END R_GOOD_EGG_QTY-- 입고 수량
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS NOT NULL THEN HER.GOOD_EGG_QTY ELSE 0 END MOVE_OUT_GOOD_EGG_QTY
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS  NULL THEN HER.GOOD_EGG_QTY ELSE 0 END MOVE_IN_GOOD_EGG_QTY
            ,CASE HER.MOVE_IN_FLAG WHEN 'N' THEN  HER.DIRTY_EGG_QTY  ELSE 0 END R_DIRTY_EGG_QTY-- 입고 수량
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS NOT NULL THEN HER.DIRTY_EGG_QTY ELSE 0 END MOVE_OUT_DIRTY_EGG_QTY
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS  NULL THEN HER.GOOD_EGG_QTY ELSE 0 END MOVE_IN_DIRTY_EGG_QTY
            ,CASE HER.MOVE_IN_FLAG WHEN 'N' THEN  HER.JUMBO_EGG_QTY  ELSE 0 END R_JUMBO_EGG_QTY-- 입고 수량
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS NOT NULL THEN HER.DIRTY_EGG_QTY ELSE 0 END MOVE_OUT_JUMBO_EGG_QTY
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS  NULL THEN HER.GOOD_EGG_QTY ELSE 0 END MOVE_IN_JUMBO_EGG_QTY
            ,CASE HER.MOVE_IN_FLAG WHEN 'N' THEN  HER.SMALL_EGG_QTY  ELSE 0 END R_SMALL_EGG_QTY-- 입고 수량
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS NOT NULL THEN HER.DIRTY_EGG_QTY ELSE 0 END MOVE_OUT_SMALL_EGG_QTY
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS  NULL THEN HER.SMALL_EGG_QTY ELSE 0 END MOVE_IN_SMALL_EGG_QTY
            ,CASE HER.MOVE_IN_FLAG WHEN 'N' THEN  HER.MISS_SHAPE_EGG_QTY  ELSE 0 END R_MISS_SHAPE_EGG_QTY-- 입고 수량
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS NOT NULL THEN HER.DIRTY_EGG_QTY ELSE 0 END MOVE_OUT_MISS_SHAPE_EGG_QTY
            ,CASE WHEN HER.MOVE_IN_FLAG = 'Y' AND HER.MOVE_OUT_DATE IS  NULL THEN HER.GOOD_EGG_QTY ELSE 0 END MOVE_IN_MISS_SHAPE_EGG_QTY            
        FROM TL_HATCHING_EGG_RECV HER
    ) HER ON EGT.FARM_CODE = HER.FARM_CODE AND EGT.FLOCK_ID = HER.FLOCK_ID 
        AND EGT.HH_ID = HER.HH_ID AND EGT.TRANSFER_NO = HER.TRANSFER_NO
    GROUP BY  HER.RECEIVE_DATE, HER.FARM_CODE, HER.FLOCK_ID, HER.HH_ID
) HER ON BR.WORK_DATE = HER.RECEIVE_DATE AND BR.FARM_CODE = HER.FARM_CODE
    AND BR.FLOCK_ID = HER.FLOCK_ID AND BR.HH_ID = HER.HH_ID
LEFT JOIN (  -- 검란
    SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID,  GRI.GRADING_DATE
     --   , COUNT(*) OVER() COUNT
     --   ,HER.TRANSFER_NO
    ,SUM(GRI.GRADING_QTY) GRADING_QTY
    ,SUM(GRI.HATCHING_EGG_QTY) HATCHING_EGG_QTY
    ,SUM(GRI.SETTING_QTY) SETTING_QTY
    ,SUM(GRI.TRANSFER_QTY) TRANSFER_QTY
    ,SUM(GRI.DISCARD_QTY) DISCARD_QTY
    ,SUM(GRI.NONE_SETTING_QTY) NONE_SETTING_QTY
    ,SUM(NVL(GRI_CUT_HATCHING_EGG_QTY, 0)) GRI_CUT_HATCHING_EGG_QTY
    ,SUM(GRI.MISS_SHAPE_EGG_QTY) MISS_SHAPE_EGG_QTY
    ,SUM(GRI.THIN_EGG_QTY) THIN_EGG_QTY
    ,SUM(GRI.CRACK_EGG_QTY) CRACK_EGG_QTY
    ,SUM(GRI.DAMAGE_EGG_QTY) DAMAGE_EGG_QTY
    ,SUM(GRI.DIRTY_EGG_QTY) DIRTY_EGG_QTY
    ,SUM(GRI.JUMBO_EGG_QTY) JUMBO_EGG_QTY
    ,SUM(GRI.SMALL_EGG_QTY) SMALL_EGG_QTY
    ,SUM(GRI.MISS_SHAPE_EGG_QTY + GRI.THIN_EGG_QTY + GRI.CRACK_EGG_QTY + GRI.DAMAGE_EGG_QTY + GRI.DIRTY_EGG_QTY + GRI.JUMBO_EGG_QTY + GRI.SMALL_EGG_QTY) TOTAL_EGG_QTY
    ,JSON_ARRAYAGG(
        JSON_OBJECT (
            'hatchery_id' VALUE GRI.HATCHERY_ID
            ,'egg_receive_no' VALUE GRI.EGG_RECEIVE_NO
            ,'receive_date' VALUE TO_CHAR(GRI.RECEIVE_DATE, 'YYYY-MM-DD')
            ,'grading_date' VALUE TO_CHAR(GRI.GRADING_DATE, 'YYYY-MM-DD')
            ,'grading_qty' VALUE GRI.GRADING_QTY
            ,'hatching_egg_qty' VALUE GRI.HATCHING_EGG_QTY
            ,'egg' VALUE JSON_OBJECT(
                'strain_code' VALUE GRI.STRAIN_CODE
                ,'miss_shape' VALUE GRI.MISS_SHAPE_EGG_QTY
                ,'thin' VALUE GRI.THIN_EGG_QTY
                ,'crack' VALUE GRI.CRACK_EGG_QTY
                ,'damage' VALUE GRI.DAMAGE_EGG_QTY
                ,'dirty' VALUE GRI.DIRTY_EGG_QTY
                ,'jumbo' VALUE GRI.JUMBO_EGG_QTY
                ,'small' VALUE GRI.SMALL_EGG_QTY
                ,'total' VALUE (GRI.MISS_SHAPE_EGG_QTY + GRI.THIN_EGG_QTY + GRI.CRACK_EGG_QTY + GRI.DAMAGE_EGG_QTY + GRI.DIRTY_EGG_QTY + GRI.JUMBO_EGG_QTY + GRI.SMALL_EGG_QTY)
                ABSENT ON NULL
            )
            ,'grading_rem' VALUE GRI.GRADING_REM
            ,'setting_qty' VALUE GRI.SETTING_QTY
            ,'transfer_qty' VALUE GRI.TRANSFER_QTY
            ,'discard_qty' VALUE GRI.DISCARD_QTY
            ,'none_setting_qty' VALUE GRI.NONE_SETTING_QTY
            ,'discard_rem' VALUE GRI.DISCARD_REM
            ,'graing_cut' VALUE NVL(GRI_CUT_HATCHING_EGG_QTY, 0)
            ,'cut_dtl' VALUE GRI_CUT.GRI_CUT_HIST 
        ABSENT ON NULL
      ) ORDER BY GRI.HATCHERY_ID,GRI.EGG_RECEIVE_NO
      ABSENT ON NULL
    ) GRADING_DTL
    FROM (
        SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
      --  ,COUNT(*) OVER() COUNT
        FROM TP_EGGPROD_LOG EGP
        LEFT JOIN TP_EGG_TRANSFER_EPDATE EGT
        ON EGP.EP_DATE = EGT.EP_DATE AND EGP.FARM_CODE = EGT.FARM_CODE 
            AND EGP.FLOCK_ID = EGT.FLOCK_ID AND EGP.HH_ID = EGT.HH_ID
        INNER JOIN TP_EGG_TRANSFER_MAST EGTM 
        ON EGT.FARM_CODE = EGTM.FARM_CODE AND EGT.TRANSFER_NO = EGTM.TRANSFER_NO
        LEFT JOIN TP_EGG_TRANSFER_HH EGTH
        ON EGT.FARM_CODE = EGTH.FARM_CODE AND EGT.FLOCK_ID = EGTH.FLOCK_ID
            AND EGT.HH_ID = EGTH.HH_ID AND EGT.TRANSFER_NO = EGTH.TRANSFER_NO
        GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
    ) EGT
    LEFT JOIN TL_HATCHING_EGG_RECV HER
    ON EGT.FARM_CODE = HER.FARM_CODE AND EGT.FLOCK_ID = HER.FLOCK_ID 
        AND EGT.HH_ID = HER.HH_ID AND EGT.TRANSFER_NO = HER.TRANSFER_NO
    LEFT JOIN TL_GRADING_INFO GRI
    ON HER.HATCHERY_ID = GRI.HATCHERY_ID AND HER.EGG_RECEIVE_NO = GRI.EGG_RECEIVE_NO
    LEFT JOIN (
         SELECT GRI_CUT.HATCHERY_ID, GRI_CUT.EGG_RECEIVE_NO
            ,SUM(GRI_CUT.HATCHING_EGG_QTY) GRI_CUT_HATCHING_EGG_QTY
            ,JSON_ARRAYAGG(
                JSON_OBJECT(
                    'seq_no' VALUE TO_CHAR(GRI_CUT.SEQ_NO)
                    ,'receive_date' VALUE TO_CHAR(GRI_CUT.RECEIVE_DATE, 'YYYY-MM-DD')
                    ,'work_date' VALUE TO_CHAR(GRI_CUT.WORK_DATE, 'YYYY-MM-DD')
                    ,'hatching_egg_qty' VALUE GRI_CUT.HATCHING_EGG_QTY
                    ABSENT ON NULL
                ) ORDER BY GRI_CUT.SEQ_NO
            ) GRI_CUT_HIST
        FROM TL_GRADING_CUT_HIST GRI_CUT
        GROUP BY GRI_CUT.HATCHERY_ID, GRI_CUT.EGG_RECEIVE_NO
    ) GRI_CUT ON GRI.HATCHERY_ID = GRI_CUT.HATCHERY_ID AND GRI.EGG_RECEIVE_NO = GRI_CUT.EGG_RECEIVE_NO
    GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID,  GRI.GRADING_DATE
) GRI ON BR.WORK_DATE = GRI.GRADING_DATE AND BR.FARM_CODE = GRI.FARM_CODE
     AND BR.FLOCK_ID = GRI.FLOCK_ID AND BR.HH_ID = GRI.HH_ID
LEFT JOIN ( -- SETTING
    SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID , SETT.SETTING_DATE
     --   , COUNT(*) OVER() COUNT
     --   ,HER.TRANSFER_NO
        ,SUM(SETT.SETTING_QTY) SETTING_QTY
        ,SUM(SETT.FERTILE_QTY) FERTILE_QTY
        ,SUM(SETT.INFERTILE_QTY) INFERTILE_QTY
        ,SUM(SETT.EXPLODE_QTY) EXPLODE_QTY
        ,SUM(SETT.SETT_CUT_SETTING_QTY) SETT_CUT_SETTING_QTY
        ,SUM(SETT.SETT_CUT_FERTILE_QTY) SETT_CUT_FERTILE_QTY     
        ,JSON_ARRAYAGG(
            JSON_OBJECT(
                 'hatchery_id' VALUE SETT.HATCHERY_ID
                ,'egg_receive_no' VALUE SETT.EGG_RECEIVE_NO
                ,'setting_date' VALUE TO_CHAR(SETT.SETTING_DATE, 'YYYY-MM-DD')
                ,'setting_seq' VALUE SETT.SETT_SEQ_DTL
                ABSENT ON NULL
            )
        ) SETT_DTL
    FROM (
        SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
      --  ,COUNT(*) OVER() COUNT
        FROM TP_EGGPROD_LOG EGP
        LEFT JOIN TP_EGG_TRANSFER_EPDATE EGT
        ON EGP.EP_DATE = EGT.EP_DATE AND EGP.FARM_CODE = EGT.FARM_CODE 
            AND EGP.FLOCK_ID = EGT.FLOCK_ID AND EGP.HH_ID = EGT.HH_ID
        INNER JOIN TP_EGG_TRANSFER_MAST EGTM 
        ON EGT.FARM_CODE = EGTM.FARM_CODE AND EGT.TRANSFER_NO = EGTM.TRANSFER_NO
        LEFT JOIN TP_EGG_TRANSFER_HH EGTH
        ON EGT.FARM_CODE = EGTH.FARM_CODE AND EGT.FLOCK_ID = EGTH.FLOCK_ID
            AND EGT.HH_ID = EGTH.HH_ID AND EGT.TRANSFER_NO = EGTH.TRANSFER_NO
        GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
    ) EGT
    LEFT JOIN TL_HATCHING_EGG_RECV HER
    ON EGT.FARM_CODE = HER.FARM_CODE AND EGT.FLOCK_ID = HER.FLOCK_ID 
        AND EGT.HH_ID = HER.HH_ID AND EGT.TRANSFER_NO = HER.TRANSFER_NO
    LEFT JOIN TL_GRADING_INFO GRI
    ON HER.HATCHERY_ID = GRI.HATCHERY_ID AND HER.EGG_RECEIVE_NO = GRI.EGG_RECEIVE_NO
    LEFT JOIN (
        SELECT SETT.HATCHERY_ID, SETT.EGG_RECEIVE_NO, SETT.SETTING_DATE
    --    ,SETT_CUT.HATCHERY_ID A1, SETT_CUT.EGG_RECEIVE_NO A2, SETT_CUT.SETTING_SEQ A3
            ,SUM(SETT.SETTING_QTY) SETTING_QTY
            ,SUM(SETT.FERTILE_QTY) FERTILE_QTY
            ,SUM(SETT.INFERTILE_QTY) INFERTILE_QTY
            ,SUM(SETT.EXPLODE_QTY) EXPLODE_QTY
            ,SUM(SETT_CUT.SETT_CUT_SETTING_QTY) SETT_CUT_SETTING_QTY
            ,SUM(SETT_CUT.SETT_CUT_FERTILE_QTY) SETT_CUT_FERTILE_QTY
            ,JSON_ARRAYAGG(
                JSON_OBJECT(
                     'setting_seq' VALUE SETT.SETTING_SEQ
                    ,'setter_id' VALUE SETT.SETTER_ID
                    ,'setting_date' VALUE TO_CHAR(SETT.SETTING_DATE, 'YYYY-MM-DD')
                    ,'candling_date' VALUE TO_CHAR(SETT.CANDLING_DATE, 'YYYY-MM-DD')
                    ,'egg' VALUE JSON_OBJECT (
                         'strain_code' VALUE SETT.STRAIN_CODE
                        ,'setting_qty' VALUE SETT.SETTING_QTY
                        ,'fertile_qty' VALUE SETT.FERTILE_QTY
                        ,'infertile_qty' VALUE SETT.INFERTILE_QTY
                        ,'explode_qty' VALUE SETT.EXPLODE_QTY
                        ABSENT ON NULL
                      )
                    ,'hatcher_id' VALUE SETT.HATCHER_ID
                    ,'hatcher_status' VALUE SETT.HATCHER_STATUS
                    ,'setting_rem' VALUE SETT.SETTING_REM
                    ,'candling_rem' VALUE SETT.CANDLING_REM
                    ,'setting_cut' VALUE NVL(SETT_CUT.SETT_CUT_SETTING_QTY,0)
                    ,'fertile_cut' VALUE NVL(SETT_CUT.SETT_CUT_FERTILE_QTY,0)
                    ,'cut_dtl' VALUE SETT_CUT.SETT_CUT_HIST
                ) ORDER BY SETT.SETTING_SEQ
            ) SETT_SEQ_DTL
        FROM TL_SETTING_INFO SETT
        LEFT JOIN (
            SELECT SETT_CUT.HATCHERY_ID, SETT_CUT.EGG_RECEIVE_NO, SETT_CUT.SETTING_SEQ
                ,SUM(NVL(SETT_CUT.SETTING_QTY,0)) SETT_CUT_SETTING_QTY
                ,SUM(NVL(SETT_CUT.FERTILE_QTY,0)) SETT_CUT_FERTILE_QTY
                ,JSON_ARRAYAGG(
                    JSON_OBJECT(
                        'seq_no' VALUE TO_CHAR(SETT_CUT.SEQ_NO)
                        ,'setting_qty' VALUE SETT_CUT.SETTING_QTY
                        ,'fertile_qty' VALUE SETT_CUT.FERTILE_QTY
                        ,'work_date' VALUE TO_CHAR(SETT_CUT.WORK_DATE, 'YYYY-MM-DD')
                        ABSENT ON NULL
                    )
                   ABSENT ON NULL
                ) SETT_CUT_HIST
            FROM TL_SETTER_CUT_HIST SETT_CUT
            GROUP BY SETT_CUT.HATCHERY_ID, SETT_CUT.EGG_RECEIVE_NO, SETT_CUT.SETTING_SEQ
        ) SETT_CUT ON SETT.HATCHERY_ID = SETT_CUT.HATCHERY_ID AND SETT.EGG_RECEIVE_NO = SETT_CUT.EGG_RECEIVE_NO
          AND SETT.SETTING_SEQ = SETT_CUT.SETTING_SEQ
        GROUP BY SETT.HATCHERY_ID, SETT.EGG_RECEIVE_NO, SETT.SETTING_DATE, SETT_CUT.HATCHERY_ID, SETT_CUT.EGG_RECEIVE_NO, SETT_CUT.SETTING_SEQ        
    ) SETT ON HER.HATCHERY_ID = SETT.HATCHERY_ID AND HER.EGG_RECEIVE_NO = SETT.EGG_RECEIVE_NO
    GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID,  SETT.SETTING_DATE
) SETT ON BR.WORK_DATE = SETT.SETTING_DATE AND BR.FARM_CODE = SETT.FARM_CODE
        AND BR.FLOCK_ID = SETT.FLOCK_ID AND BR.HH_ID = SETT.HH_ID
LEFT JOIN (  -- 부화 
    SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, HATCHING.HATCH_DATE  --LABEL-CC  -- Main 부화
     --   , COUNT(*) OVER() COUNT
     --   ,HER.TRANSFER_NO
        ,SUM(NVL(HATCHING.DIS_QTY,0)) DIS_QTY
        ,SUM(NVL(HATCHING.DEF_QTY,0)) DEF_QTY
        ,SUM(NVL(HATCHING.BLOAT_QTY,0)) BLOAT_QTY
        ,SUM(NVL(HATCHING.DEAD_QTY,0)) DEAD_QTY
        ,SUM(NVL(HATCHING.OMPAL_QTY,0)) OMPAL_QTY
        ,SUM(NVL(HATCHING.WEAK_QTY,0)) WEAK_QTY
        ,SUM(NVL(HATCHING.BY_PRODUCT_TOTAL_QTY,0)) BY_PRODUCT_TOTAL_QTY
        -- cutting
        ,SUM(NVL(HATCHING.HATCHING_CUT_SP_QTY,0)) HATCHING_CUT_SP_QTY
        ,SUM(NVL(HATCHING.HATCHING_CUT_A2_QTY,0)) HATCHING_CUT_A2_QTY
        ,SUM(NVL(HATCHING.HATCHING_CUT_A1_QTY,0)) HATCHING_CUT_A1_QTY
        ,SUM(NVL(HATCHING.HATCHING_CUT_BM_QTY,0)) HATCHING_CUT_BM_QTY
        ,SUM(NVL(HATCHING.HATCHING_CUT_B_QTY,0)) HATCHING_CUT_B_QTY
        ,SUM(NVL(HATCHING.HATCHING_CUT_POLOS_QTY,0)) HATCHING_CUT_POLOS_QTY
        ,SUM(NVL(HATCHING.HATCHING_CUT_TOTAL_QTY,0)) HATCHING_CUT_TOTAL_QTY
        -- salable
        ,SUM(NVL(HATCHING.PSDOC_F_QTY,0)) PSDOC_F_QTY
        ,SUM(NVL(HATCHING.PSDOC_M_QTY,0)) PSDOC_M_QTY
        ,SUM(NVL(HATCHING.PSDOC_TOTAL_QTY,0)) PSDOC_TOTAL_QTY
        ,SUM(NVL(HATCHING.SEX_QTY,0)) SEX_QTY
        ,SUM(NVL(HATCHING.SP_QTY,0)) SP_QTY
        ,SUM(NVL(HATCHING.A1_QTY,0)) A1_QTY
        ,SUM(NVL(HATCHING.A2_QTY,0)) A2_QTY
        ,SUM(NVL(HATCHING.BM_QTY,0)) BM_QTY
        ,SUM(NVL(HATCHING.B_QTY,0)) B_QTY
        ,SUM(NVL(HATCHING.POLOS_QTY,0)) POLOS_QTY
        ,SUM(NVL(HATCHING.SALES_TOTAL_QTY ,0) ) SALES_TOTAL_QTY     
        ,JSON_ARRAYAGG(
            JSON_OBJECT(
                 'hatchery_id' VALUE HATCHING.HATCHERY_ID
                ,'egg_receive_no' VALUE HATCHING.EGG_RECEIVE_NO
                ,'hatch_date' VALUE TO_CHAR(HATCHING.HATCH_DATE, 'YYYY-MM-DD')
                ,'setting_seq' VALUE HATCHING.HATCHING_SEQ_DTL
                ABSENT ON NULL
            ) ORDER BY HATCHING.HATCHERY_ID,HATCHING.EGG_RECEIVE_NO
        ) HATCHING_DTL
    FROM (
        SELECT EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO     
      --  ,COUNT(*) OVER() COUNT
        FROM TP_EGGPROD_LOG EGP
        LEFT JOIN TP_EGG_TRANSFER_EPDATE EGT
        ON EGP.EP_DATE = EGT.EP_DATE AND EGP.FARM_CODE = EGT.FARM_CODE 
            AND EGP.FLOCK_ID = EGT.FLOCK_ID AND EGP.HH_ID = EGT.HH_ID
        INNER JOIN TP_EGG_TRANSFER_MAST EGTM 
        ON EGT.FARM_CODE = EGTM.FARM_CODE AND EGT.TRANSFER_NO = EGTM.TRANSFER_NO
        LEFT JOIN TP_EGG_TRANSFER_HH EGTH
        ON EGT.FARM_CODE = EGTH.FARM_CODE AND EGT.FLOCK_ID = EGTH.FLOCK_ID
            AND EGT.HH_ID = EGTH.HH_ID AND EGT.TRANSFER_NO = EGTH.TRANSFER_NO
        GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID, EGT.TRANSFER_NO
    ) EGT
    LEFT JOIN TL_HATCHING_EGG_RECV HER
    ON EGT.FARM_CODE = HER.FARM_CODE AND EGT.FLOCK_ID = HER.FLOCK_ID 
        AND EGT.HH_ID = HER.HH_ID AND EGT.TRANSFER_NO = HER.TRANSFER_NO
    LEFT JOIN TL_GRADING_INFO GRI
    ON HER.HATCHERY_ID = GRI.HATCHERY_ID AND HER.EGG_RECEIVE_NO = GRI.EGG_RECEIVE_NO
    LEFT JOIN (
        SELECT HATCHING.HATCHERY_ID, HATCHING.EGG_RECEIVE_NO, HATCHING.HATCH_DATE   --LABEL-BB
            ,SUM(NVL(HATCHING.DIS_QTY,0)) DIS_QTY
            ,SUM(NVL(HATCHING.DEF_QTY,0)) DEF_QTY
            ,SUM(NVL(HATCHING.BLOT_QTY,0)) BLOAT_QTY
            ,SUM(NVL(HATCHING.DEAD_QTY,0)) DEAD_QTY
            ,SUM(NVL(HATCHING.OMPAL_QTY,0)) OMPAL_QTY
            ,SUM(NVL(HATCHING.WEAK_QTY,0)) WEAK_QTY
            ,SUM(NVL(HATCHING.DIS_QTY,0) + NVL(HATCHING.DEF_QTY,0) + NVL(HATCHING.BLOT_QTY,0) + NVL(HATCHING.DEAD_QTY,0) + 
                NVL(HATCHING.OMPAL_QTY,0) + NVL(HATCHING.WEAK_QTY,0)) BY_PRODUCT_TOTAL_QTY
            -- cutting
            ,SUM(NVL(HATCHING.HATCHING_CUT_SP_QTY,0)) HATCHING_CUT_SP_QTY
            ,SUM(NVL(HATCHING.HATCHING_CUT_A2_QTY,0)) HATCHING_CUT_A2_QTY
            ,SUM(NVL(HATCHING.HATCHING_CUT_A1_QTY,0)) HATCHING_CUT_A1_QTY
            ,SUM(NVL(HATCHING.HATCHING_CUT_BM_QTY,0)) HATCHING_CUT_BM_QTY
            ,SUM(NVL(HATCHING.HATCHING_CUT_B_QTY,0)) HATCHING_CUT_B_QTY
            ,SUM(NVL(HATCHING.HATCHING_CUT_POLOS_QTY,0)) HATCHING_CUT_POLOS_QTY
            ,SUM(NVL(HATCHING.HATCHING_CUT_SP_QTY,0) + NVL(HATCHING.HATCHING_CUT_A2_QTY,0) +
                NVL(HATCHING.HATCHING_CUT_A1_QTY,0) + NVL(HATCHING.HATCHING_CUT_BM_QTY,0) + 
                NVL(HATCHING.HATCHING_CUT_B_QTY,0) + NVL(HATCHING.HATCHING_CUT_POLOS_QTY,0)) HATCHING_CUT_TOTAL_QTY
           -- salable
            ,SUM(NVL(HATCHING.PSDOC_F_QTY,0)) PSDOC_F_QTY
            ,SUM(NVL(HATCHING.PSDOC_M_QTY,0)) PSDOC_M_QTY
            ,SUM(NVL(HATCHING.PSDOC_F_QTY,0) + NVL(HATCHING.PSDOC_M_QTY,0)) PSDOC_TOTAL_QTY
            ,SUM(NVL(HATCHING.SEX_QTY,0)) SEX_QTY
            ,SUM(NVL(HATCHING.SP_QTY,0)) SP_QTY
            ,SUM(NVL(HATCHING.A1_QTY,0)) A1_QTY
            ,SUM(NVL(HATCHING.A2_QTY,0)) A2_QTY
            ,SUM(NVL(HATCHING.BM_QTY,0)) BM_QTY
            ,SUM(NVL(HATCHING.B_QTY,0)) B_QTY
            ,SUM(NVL(HATCHING.POLOS_QTY,0)) POLOS_QTY
            ,SUM(NVL(HATCHING.PSDOC_F_QTY,0) + NVL(HATCHING.PSDOC_M_QTY,0) + NVL(HATCHING.SEX_QTY,0) +
                NVL(HATCHING.SP_QTY,0) + NVL(HATCHING.A1_QTY,0) + NVL(HATCHING.A2_QTY,0) +
                NVL(HATCHING.BM_QTY,0) + NVL(HATCHING.B_QTY,0) + NVL(HATCHING.POLOS_QTY,0) ) SALES_TOTAL_QTY
            ,JSON_ARRAYAGG(
                JSON_OBJECT(
                     'setting_seq' VALUE HATCHING.SETTING_SEQ
                     ,'strain_code' VALUE HATCHING.STRAIN_CODE
                     ,'by_product' VALUE JSON_OBJECT(
                        'dis' VALUE NVL(HATCHING.DIS_QTY,0)
                        ,'def' VALUE NVL(HATCHING.DEF_QTY,0)
                        ,'bloat' VALUE NVL(HATCHING.BLOT_QTY,0)
                        ,'dead' VALUE NVL(HATCHING.DEAD_QTY,0)
                        ,'ompal' VALUE NVL(HATCHING.OMPAL_QTY,0)
                        ,'weak' VALUE NVL(HATCHING.WEAK_QTY,0)
                        ,'total' VALUE (NVL(HATCHING.DIS_QTY,0) + NVL(HATCHING.DEF_QTY,0) + NVL(HATCHING.BLOT_QTY,0) + NVL(HATCHING.DEAD_QTY,0) + 
                                NVL(HATCHING.OMPAL_QTY,0) + NVL(HATCHING.WEAK_QTY,0))
                       ABSENT ON NULL
                     )
                     ,'doc' VALUE JSON_OBJECT (
                         'psdoc_f' VALUE HATCHING.PSDOC_F_QTY
                        ,'psdoc_m' VALUE HATCHING.PSDOC_M_QTY
                        ,'psdoc_total' VALUE HATCHING.PSDOC_F_QTY + HATCHING.PSDOC_M_QTY
                        ,'sex' VALUE HATCHING.SEX_QTY
                        ,'premium' VALUE HATCHING.SP_QTY
                        ,'standard_1' VALUE HATCHING.A1_QTY
                        ,'standard_2' VALUE HATCHING.A2_QTY
                        ,'bm' VALUE HATCHING.BM_QTY
                        ,'gradeb' VALUE HATCHING.B_QTY
                        ,'polos' VALUE HATCHING.POLOS_QTY
                        ,'total' VALUE HATCHING.PSDOC_F_QTY + HATCHING.PSDOC_M_QTY + HATCHING.SEX_QTY + HATCHING.SP_QTY +
                                    HATCHING.A1_QTY + HATCHING.A2_QTY + HATCHING.BM_QTY + HATCHING.B_QTY + HATCHING.POLOS_QTY
                        ABSENT ON NULL
                     )
                    ,'cut_dtl' VALUE HATCHING.HATCHING_CUT_HIST            
                    ABSENT ON NULL
                ) ORDER BY HATCHING.SETTING_SEQ
            ) HATCHING_SEQ_DTL            
        FROM TL_SETTING_INFO SETT
        LEFT JOIN (
            SELECT HATCHING.* -- HATCHING.HATCHERY_ID, HATCHING.EGG_RECEIVE_NO, HATCHING.HATCH_DATE, HATCHING.SETTING_SEQ --LABEL-AA
                ,HATCHING_CUT.HATCHING_CUT_HIST ,HATCHING_CUT_SP_QTY ,HATCHING_CUT_A2_QTY ,HATCHING_CUT_A1_QTY
                ,HATCHING_CUT_BM_QTY ,HATCHING_CUT_B_QTY ,HATCHING_CUT_POLOS_QTY ,HATCHING_CUT_TOTAL_QTY            
            -- something
            FROM TL_HATCHING_INFO HATCHING 
            LEFT JOIN (
                SELECT HATCHING_CUT.HATCHERY_ID, HATCHING_CUT.EGG_RECEIVE_NO, HATCHING_CUT.SETTING_SEQ  --LABEL-CUT
                ,SUM(NVL(HATCHING_CUT.SP_QTY,0)) HATCHING_CUT_SP_QTY
                ,SUM(NVL(HATCHING_CUT.A2_QTY,0)) HATCHING_CUT_A2_QTY
                ,SUM(NVL(HATCHING_CUT.A1_QTY,0)) HATCHING_CUT_A1_QTY
                ,SUM(NVL(HATCHING_CUT.BM_QTY,0)) HATCHING_CUT_BM_QTY
                ,SUM(NVL(HATCHING_CUT.B_QTY,0)) HATCHING_CUT_B_QTY
                ,SUM(NVL(HATCHING_CUT.POLOS_QTY,0)) HATCHING_CUT_POLOS_QTY
                ,SUM(NVL(HATCHING_CUT.SP_QTY,0) + NVL(HATCHING_CUT.A2_QTY,0) + NVL(HATCHING_CUT.A1_QTY,0) +
                    NVL(HATCHING_CUT.BM_QTY,0) + NVL(HATCHING_CUT.B_QTY,0) + NVL(HATCHING_CUT.POLOS_QTY,0)) HATCHING_CUT_TOTAL_QTY
                ,JSON_ARRAYAGG(
                    JSON_OBJECT(
                        'seq_no' VALUE TO_CHAR(HATCHING_CUT.SEQ_NO)
                        ,'premium' VALUE HATCHING_CUT.SP_QTY
                        ,'standard_2' VALUE HATCHING_CUT.A2_QTY
                        ,'standard_1' VALUE HATCHING_CUT.A1_QTY
                        ,'bm' VALUE HATCHING_CUT.BM_QTY
                        ,'gradeb' VALUE HATCHING_CUT.B_QTY
                        ,'polos' VALUE HATCHING_CUT.POLOS_QTY
                        ,'total' VALUE HATCHING_CUT.SP_QTY + HATCHING_CUT.A2_QTY + HATCHING_CUT.A1_QTY + HATCHING_CUT.BM_QTY +
                                        HATCHING_CUT.B_QTY + HATCHING_CUT.POLOS_QTY 
                        ,'work_date' VALUE TO_CHAR(HATCHING_CUT.WORK_DATE, 'YYYY-MM-DD')
                        ABSENT ON NULL
                    ) ORDER BY HATCHING_CUT.SEQ_NO
                   ABSENT ON NULL
                ) HATCHING_CUT_HIST
                FROM TL_HATCHING_CUT_HIST HATCHING_CUT
                GROUP BY HATCHING_CUT.HATCHERY_ID, HATCHING_CUT.EGG_RECEIVE_NO, HATCHING_CUT.SETTING_SEQ  --LABEL-CUT
            ) HATCHING_CUT ON HATCHING.HATCHERY_ID = HATCHING_CUT.HATCHERY_ID AND HATCHING.EGG_RECEIVE_NO = HATCHING_CUT.EGG_RECEIVE_NO
                AND HATCHING.SETTING_SEQ = HATCHING_CUT.SETTING_SEQ  --LABEL-AA
        ) HATCHING
        ON SETT.HATCHERY_ID = HATCHING.HATCHERY_ID AND SETT.EGG_RECEIVE_NO = HATCHING.EGG_RECEIVE_NO
            AND SETT.SETTING_SEQ = HATCHING.SETTING_SEQ
            WHERE HATCHING.HATCH_DATE IS NOT NULL
        GROUP BY HATCHING.HATCHERY_ID, HATCHING.EGG_RECEIVE_NO, HATCHING.HATCH_DATE
        ORDER BY HATCHING.HATCH_DATE, HATCHING.HATCHERY_ID, HATCHING.EGG_RECEIVE_NO   --LABEL-BB
    ) HATCHING ON HER.HATCHERY_ID = HATCHING.HATCHERY_ID AND HER.EGG_RECEIVE_NO = HATCHING.EGG_RECEIVE_NO
         WHERE HATCHING.HATCH_DATE IS NOT NULL
    GROUP BY EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID,  HATCHING.HATCH_DATE   -- LABEL-CC
    ORDER BY HATCHING.HATCH_DATE ,EGT.FARM_CODE, EGT.FLOCK_ID, EGT.HH_ID   
) HATCHING ON BR.WORK_DATE = HATCHING.HATCH_DATE AND BR.FARM_CODE = HATCHING.FARM_CODE 
        AND BR.FLOCK_ID = HATCHING.FLOCK_ID AND BR.HH_ID = HATCHING.HH_ID
--
--    WHERE BR.WORK_DATE BETWEEN TO_DATE('2019-12-04', 'YYYY-MM-DD') AND TO_DATE('2019-12-07', 'YYYY-MM-DD')
--    WHERE EP.EP_DATE IS NOT NULL
--     WHERE BR.WORK_DATE >= TO_DATE('2019-01-29', 'YYYY-MM-DD') --AND HATCHING.HATCH_DATE IS NOT NULL
--     WHERE HATCHING.HATCH_DATE IS NOT NULL
    WHERE GRI.GRADING_DATE IS NOT NULL
    ORDER BY BR.WORK_DATE, BR.FARM_CODE, BR.FLOCK_ID, BR.HH_ID
--    fetch first 1000 rows only
    ]]>
    </select>
</mapper>